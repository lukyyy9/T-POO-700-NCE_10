name: Run Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Cache Elixir deps
      uses: actions/cache@v2
      with:
        path: |
          deps
          _build
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-

    - name: Cache Node modules
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Build and test backend
      run: |
        docker build -t backend-test ./backend
        docker run --rm backend-test mix test

    - name: Build and test frontend
      run: |
        docker build -t frontend-test ./frontend
        docker run --rm frontend-test npm test

    - name: Run integration tests
      run: |
        docker-compose -f docker-compose.test.yml up --build -d
        docker-compose -f docker-compose.test.yml run backend mix test
        docker-compose -f docker-compose.test.yml run frontend npm test
      continue-on-error: true

    - name: Cleanup Docker Compose
      if: always()
      run: docker-compose -f docker-compose.test.yml down -v

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: test-results
        path: |
          backend/test-results
          frontend/test-results

    - name: Check test results
      if: failure()
      run: exit 1